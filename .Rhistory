View(covIndex)
covIndex<-ddply(expanded, ~spID, summarise, covDescript = unique(covDescript), spnam = unique(GenusSpecies))
spIndex<-species[,c('spID','spName')]
sum(!covIndex$spID %in% spIndex$spID) #if 0, then all covIndex spIDs are listed in species
#reshape covIndex so that each row has both inv and native
spI<-orderBy(~spID, spIndex[spIndex$spID %in% covIndex$spID,])
covI<-orderBy(~spID, covIndex[covIndex$spID %in% spIndex$spID,])
dim(spI)
dim(covI)
#check to see if spIDs match
sum(!spI[,'spID'] ==  covI[,'spID']) # if 0, then spIDs match
#check to see if sp names match, but first - fix white space around sp names in covI
# returns string w/o leading or trailing whitespace.. need to fix covI[,spnam]
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
covI[,'spnam']<-trim(as.character(covI[,'spnam']))
spI[,'spName']<-trim(as.character(spI[,'spName']))
sum(!as.character(spI[,'spName']) == as.character(covI[,'spnam']), na.rm=T) # this should be 0.  If not, that measures that the species names are not identical
nonMatchingSPID<-data.frame(species=spI[!as.character(spI[,'spName']) == as.character(covI[,'spnam']),],
cover=covI[!as.character(spI[,'spName']) == as.character(covI[,'spnam']),])
nonMatchingSPID #none now.
cover.sub.1sp[,c('GenusSpecies','Genus','Species')]<-rep(NA, dim(cover.sub.1sp)[1]) #set up slots to put the species info
SPID<-as.character(unique(cover.sub.1sp$spID)) #list of spIDs in the extended df to loop through
i<-0
for(i in 1:length(SPID)){
row<-species[which(species$spID == SPID[i]),c('GenusSpecies','Genus','Species')]
cover.sub.1sp[cover.sub.1sp$spID == SPID[i],c('GenusSpecies','Genus','Species')] <- row
}
View(cover.sub.1sp)
FactorsToChar<-function(df){
tmp <- sapply(df, is.factor)
df[tmp] <- lapply(df[,tmp], as.character)
return(df)
}
cov.1sp<-FactorsToChar(cover.sub.1sp)
cov.Xsp<-FactorsToChar(expanded)
cover.sp<-rbind(cov.1sp,cov.Xsp)
dim(cov.1sp)
dim(cov.Xsp)
colnames(expanded)
expanded$mean_std<-expanded$mean_std_calc
expanded$var_std<-expanded$var_std_calc
removeCols<-c('mean_std_calc','var_std_calc')
expanded1<-expanded[,!removeCols]
expanded1<-expanded[,-removeCols]
expanded1<-expanded[,removeCols %in% colnames(expanded)]
expanded1<-expanded[,!removeCols %in% colnames(expanded)]
dim(expanded1)
expanded$mean_std<-expanded$mean_std_calc
expanded$var_std<-expanded$var_std_calc
removeCols<-c('mean_std_calc','var_std_calc')
expanded1<-expanded[,!removeCols %in% colnames(expanded)]
dim(expanded1)
removeCols<-c('mean_std_calc','var_std_calc') %in% colnames(expanded)
removeCols
removeCols<-colnames(expanded) %in% c('mean_std_calc','var_std_calc')
removeCols
expanded1<-expanded[,!removeCols]
dim(expanded1)
#make factors into characters
FactorsToChar<-function(df){
tmp <- sapply(df, is.factor)
df[tmp] <- lapply(df[,tmp], as.character)
return(df)
}
cov.1sp<-FactorsToChar(cover.sub.1sp)
cov.Xsp<-FactorsToChar(expanded1)
dim(cov.1sp)
dim(cov.Xsp)
cover.sp<-rbind(cov.1sp,cov.Xsp)
detach("package:reshape",unload=TRUE) #for untable()
library(ggplot2)
library(gridExtra)
library(reshape2)
source('CODE/mytheme.R')
figuresPath<-file.path(getwd()[1], "FIGURES_TABLES", "cwm") #where to put the saved plots
fig.height<-2.5 #inches
fig.width<- 2.5 #inches
fig.res<-300
synthdataPath<-file.path(getwd()[1], "DATA", "DATA_SYNTHESIZED", "cwm") #where to put the clean dataframes
#data synthesized by *MIIN_1_paperData.Rmd*
observations<-read.table("DATA/DATA_SYNTHESIZED/paperData/observations_procd.txt", header=TRUE, sep="\t")
cover<-read.table("DATA/DATA_SYNTHESIZED/paperData/cover_procd.txt", header=TRUE, sep="\t")
species<-read.table("DATA/DATA_SYNTHESIZED/paperData/species_procd.txt", header=TRUE, sep="\t")
traits<-read.table("DATA/DATA_SYNTHESIZED/paperData/traits_procd.txt", header=TRUE, sep="\t")
measures<-read.table("DATA/DATA_SYNTHESIZED/paperData/measures_procd.txt", header=TRUE, sep="\t")
#data synthesized by *MIIN_1_tryData.Rmd*
tryDataT<-read.table("DATA/DATA_SYNTHESIZED/tryData/tryDataT.txt", header=TRUE, sep="\t")
tryData_traitKey<-read.table("DATA/DATA_SYNTHESIZED/tryData/tryData_traitKey.txt", header=TRUE, sep="\t")
source('CODE/cwm/script_TRYstdUnits.R') # TASK= Convert TRY data to the common units used for paper traits; NEEDS= tryData_traitKey, tryDataT; MAKES= tryDataT.cu
source('CODE/cwm/script_traitBySpecies.R') # TASK= Pulls relavant TRY data and creates a species x trait table; NEEDS= tryData_traitKey, tryDataT, species; MAKES= tryGS.summ, tryGX.summ
source('CODE/cwm/script_t.R') # TASK= see above; NEEDS= species, traits, tryGS.summ, tryGX.summ; MAKES= spIDtraits
newfilename<-'spIDtraits.txt'
write.table(spIDtraits, file=paste(synthdataPath,newfilename, sep='/'), sep='\t') #will need to use this in 'summary.Rmd' to make a quality plot
source('CODE/cwm/script_spcover.R') # TASK= Calcuate species cover if possible; NEEDS= observations, cover, species; MAKES= cover.sp
source('CODE/cwm/script_c.R') # TASK= see above; NEEDS= species, cover.sp; MAKES= spIDcover
library(plyr)
source('CODE/cwm/fxn_FillTable_cover.R')
### Make empty table ####################################################
View(species)
coverOfInterest<-c('Inv', 'Nat')
coverColNams<-c(paste("mean_",coverOfInterest, sep=''),
paste("var_",coverOfInterest, sep=''),
paste("n_",coverOfInterest, sep=''),
"unit",
"qualityMeas",
"qualityNumSp")
length(coverColNams)
spColNams<-c('spID','GenusSpecies','Genus','Species')
spCols<-species[,spColNams]
tmp<-mat.or.vec(nr=dim(spCols[1]), nc=length(coverColNams))
tmp[tmp==0] <- NA
emptyDf<-data.frame(spCols, tmp)
colnames(emptyDf)<-c(spColNams,coverColNams)
# D. Get rid of rows with spID or Genus identifer == NA
emptyDf[is.na(emptyDf$spID),] #none
emptyDf[is.na(emptyDf$Genus),] #1
emptyDf[is.na(emptyDf$Species),] #same as above
emptyDf<-emptyDf[!is.na(emptyDf$Genus),] #fix this.
View(emptyDf)
unique(cover.sp$covCat) #good. only 1 covCat
unique(cover.sp$stdunit) #good. only 1 unit
colnames(cover.sp)
cover.sp.summ<-ddply(cover.sp, ~spID+invType, summarise,
mean = mean_std,
var = var_std,
num = n,
unit = stdunit,
qualityMeas = covQuality,
qualityNumSp = covNumSpp)
View(cover.sp.summ)
sum(is.na(cover.sp.summ$spID)) # this should be 0.  If not, then there is an 'NA' under spID and need to get rid of that row
colnames(cover.sp.summ)
tempdf<-dcast(cover.sp.summ, spID + qualityMeas + qualityNumSp +  unit ~ invType, value.var=c("mean","var","num")
tempdf<-dcast(cover.sp.summ, spID + qualityMeas + qualityNumSp +  unit ~ invType, value.var=c("mean","var","num"))
tempdf<-dcast(cover.sp.summ, spID + qualityMeas + qualityNumSp +  unit ~ invType, value.var=c("mean","var","num"))
tempdf<-dcast(cover.sp.summ, spID + qualityMeas + qualityNumSp +  unit ~ invType)
View(tempdf)
tempdf<-dcast(cover.sp.summ, spID + qualityMeas + qualityNumSp +  unit + mean + var  ~ invType)
View(tempdf)
tempdf<-dcast(cover.sp.summ, spID + qualityMeas + qualityNumSp +  unit + mean + var  ~ invType, value.var=c("mean","var"))
tempdf<-recast(cover.sp.summ, spID + qualityMeas + qualityNumSp +  unit + mean + var  ~ invType, measure.var=c("mean","var"))
tempdf<-recast(cover.sp.summ, spID + qualityMeas + qualityNumSp +  unit ~ invType, measure.var=c("mean","var"))
View(tempdf)
tempdf<-recast(cover.sp.summ, spID + qualityMeas + qualityNumSp +  unit ~ invType, measure.var=c("mean","var","num"))
tempdf<-recast(cover.sp.summ, spID + qualityMeas + qualityNumSp +  unit ~ invType + mean +var, measure.var=c("mean","var","num"))
tempdf<-recast(cover.sp.summ, spID + qualityMeas + qualityNumSp +  unit ~ invType, id.var=c("spID","qualityMeas","qualityNumSp","unit"))
colnames(cover.sp.summ)
tempdf<-recast(cover.sp.summ, spID + qualityMeas + qualityNumSp + unit ~ invType, id.var=c("spID","qualityMeas","qualityNumSp","unit"))
tempdf<-recast(cover.sp.summ, spID + qualityMeas + qualityNumSp + unit ~ invType, id.var=c("spID","qualityMeas","qualityNumSp","unit", "invType"))
View(tempdf)
tempdf<-melt(cover.sp.summ, id.var=c("spID","qualityMeas","qualityNumSp","unit", "invType"))
View(tempdf)
m.df<-melt(cover.sp.summ, id.var=c("spID","qualityMeas","qualityNumSp","unit", "invType"))
c.df<-dcast(m.df, spID + qualityMeas + qualityNumSp + unit ~ invType)
c.df<-dcast(m.df, spID + qualityMeas + qualityNumSp + unit ~ invType + mean + var)
c.df<-dcast(m.df, spID + qualityMeas + qualityNumSp + unit ~ mean + var)
c.df<-dcast(m.df, spID + qualityMeas + qualityNumSp + unit ~ mean)
c.df<-dcast(m.df, spID + unit ~ mean)
c.df<-dcast(m.df, spID + qualityMeas + qualityNumSp + unit ~ variable)
c.df<-dcast(m.df, spID + qualityMeas + qualityNumSp + unit ~ variable + value)
View(tempdf)
m.df<-melt(cover.sp.summ, id.var=c("spID","qualityMeas","qualityNumSp","unit"))
c.df<-dcast(m.df, spID + qualityMeas + qualityNumSp + unit ~ variable + value)
m.df<-melt(cover.sp.summ, id.vars=c("spID","qualityMeas","qualityNumSp","unit"))
head(m.df)
m.df<-melt(cover.sp.summ, id.vars=c("spID","qualityMeas","qualityNumSp","unit","invType"))
head(m.df)
m.df$newVariable<-paste(m.df$invType, m.df$variable)
m.df$newVariable<-paste(m.df$invType, m.df$variable, sep="_")
colnames(m.df)
m.dfNew<-m.df[,c('spID','qualityMeas','qualityNumSp', 'unit','value','newVariable')]
m.df<-melt(m.dfNew, id.var=c("spID","qualityMeas","qualityNumSp","unit","newVariable"))
m.dfNew1<-melt(m.dfNew, id.var=c("spID","qualityMeas","qualityNumSp","unit","newVariable"))
m.df<-melt(cover.sp.summ, id.vars=c("spID","qualityMeas","qualityNumSp","unit","invType"))
m.df$newVariable<-paste(m.df$invType, m.df$variable, sep="_")
m.dfNew<-m.df[,c('spID','qualityMeas','qualityNumSp', 'unit','value','newVariable')]
m.dfNew1<-melt(m.dfNew, id.var=c("spID","qualityMeas","qualityNumSp","unit","newVariable"))
View(m.dfNew1)
m.dfNew1<-melt(m.dfNew, id.var=c("spID","qualityMeas","qualityNumSp","unit"))
View(m.dfNew1)
m.dfNew1<-dcast(m.dfNew, spID + qualityMeas + qualityNumSp + unit + newVariable ~ value, id.var=c("spID","qualityMeas","qualityNumSp","unit"))
View(m.dfNew1)
m.dfNew1<-dcast(m.dfNew, spID + qualityMeas + qualityNumSp + unit ~ newVariable, id.var=c("spID","qualityMeas","qualityNumSp","unit"))
View(m.dfNew1)
m.df<-melt(cover.sp.summ, id.vars=c("spID","qualityMeas","qualityNumSp","unit","invType"))
m.df$newVariable<-paste(m.df$invType, m.df$variable, sep="_")
m.dfNew<-m.df[,c('spID','qualityMeas','qualityNumSp', 'unit','value','newVariable')]
c.dfNew<-dcast(m.dfNew, spID + qualityMeas + qualityNumSp + unit ~ newVariable, id.var=c("spID","qualityMeas","qualityNumSp","unit"))
colnames(c.dfNew)
colnames(emptyDf)
View(c.dfNew)
knitr::opts_chunk$set(cache=TRUE)
library(reshape2)
library(ggplot2)
library(ggthemes)
source('CODE/mytheme.R')
figuresPath<-file.path(getwd()[1], "FIGURES_TABLES", "paperData") #where to put the saved plots
fig.height<-2.5 #inches
fig.width<- 2.5 #inches
fig.res<-300
synthdataPath<-file.path(getwd()[1], "DATA", "DATA_SYNTHESIZED", "paperData") #where to put the clean dataframes
source('CODE/paperData/script_load.R') #TASK= Load and clean raw data structure; NEEDS= files in rawData folder; MAKES = papers, observations, measures, measAgg, cover, covAgg, traits, traitAgg
warnings() #warning messages that say 'NAs introduced' are okay
measures<-measures1
measAgg<-measAgg1
source('CODE/paperData/script_stdVar.R') #TASK= Standarize variance; NEEDS= cover, covAgg, traits, traitAgg, measures, measAgg; MAKES= ammends same df with extra columns
source('CODE/paperData/script_agg_cover.R')
##TASK= Aggregate the 'agg' files into the main dataframe
##NEEDS= cover, covAgg
##MAKES= adds new cols to cover
### aggregate traits ########################
source('CODE/paperData/script_agg_traits.R')
##TASK= Aggregate the 'agg' files into the main dataframe
##NEEDS= traits, traitAgg
##MAKES= adds new cols to traits
### aggregate measures ########################
source('CODE/paperData/script_agg_measures.R')
##TASK= Aggregate the 'agg' files into the main dataframe
source('CODE/paperData/script_std.R') #TASK= Convert values to a common unit; NEEDS= cover, traits, measures; MAKES= adds new cols to cover, traits, measures
View(cover.new)
removeCols<-colnames(observations) %in% c('obsMeasNote','obsCovNote','obsTraitNote','obsSpNote')
observations1<-observations[,!removeCols]
cover$covID<-paste(cover$obsID, as.numeric(cover$covEntryID), sep=".") #identify each row
df<-cover
m.df<-melt(df, id.vars=c("covID","aggID","covCat","covDescript","covInvasive","covMultiGrowth","covMultiHeight",
"covSpEntryID","covNumSpp","spID","covVarType","covRef","covImageFile","covNote","covQuality","covUnit","stdunit"),
measure.vars=c('covInvMean','covInvVar','covInvN','covNatMean','covNatVar','covNatN',
'covInvVar_VAR','covNatVar_VAR',
'stdmeanInv','stdmeanNat','stdvarInv','stdvarNat')) #melt
warnings()
m.df$invType<-rep(NA,length(dim(m.df)[1])) #add column to differentiate between inv and nat
m.df[grepl("Inv",m.df$variable),'invType']<-'inv'
m.df[grepl("Nat",m.df$variable),'invType']<-'nat'
#add column to differentiate between mean_std, var_std, mean, var, var_VAR, n
m.df$valueType<-rep(NA,length(dim(m.df)[1])) #add column to differentiate between value types
m.df[grepl("Mean",m.df$variable),'valueType']<-'mean'
m.df[grepl("Var",m.df$variable),'valueType']<-'var'
m.df[grepl("VAR",m.df$variable),'valueType']<-'var_VAR'
m.df[grepl("stdmean",m.df$variable),'valueType']<-'mean_std'
m.df[grepl("stdvar",m.df$variable),'valueType']<-'var_std'
m.df[m.df$variable %in% c('covNatN','covInvN'),'valueType']<-'n'
#cast
c.df<-dcast(m.df, covID+invType~ valueType)
idCols<-grepl("Inv",colnames(df)) | grepl("Nat",colnames(df))
idCols[colnames(df)=='covInvasive']<-FALSE
df1<-merge(df[,!idCols],c.df, by=c('covID'))
#reorganize columns
cover.clean<-df1[,c('covID','invType', #unique row identifiers
'paperID','obsID','aggID', #IDs
'covCat','covUnit','stdunit','covVarType','covRef','covImageFile','covNote','covQuality', #IDs
'covDescript','covSpEntryID','covNumSpp','spID','covInvasive','covMultiGrowth','covMultiHeight', #IDs
'mean','var','n','var_VAR','mean_std','var_std')] #data
#View(cover.clean)
# FOR COVER - Plot the histograms for the standardized cover values
pHist_cover_Std<-ggplot(data=cover.clean, aes(x=mean_std, fill=covQuality)) + mytheme +
facet_wrap(~covCat, scales='free', ncol=1) + geom_histogram()+
scale_y_continuous(expand = c(0,0)) + ggtitle('Histogram of cover values\nUnits standardized')
pHist_cover_Std
newfilename<-'cover_procd.txt'
write.table(cover, file=paste(synthdataPath,newfilename, sep='/'), sep='\t')
newfilename<-'pHist_cover_Std.png'
png(paste(figuresPath,newfilename, sep='/'),
units='in', width = fig.width*1.5, height = fig.height*3, res=fig.res)
pHist_cover_Std
dev.off()
View(species)
coverOfInterest<-c('Inv', 'Nat')
coverColNams<-c(paste("mean_",coverOfInterest, sep=''),
paste("var_",coverOfInterest, sep=''),
paste("n_",coverOfInterest, sep=''),
"unit",
"qualityMeas",
"qualityNumSp")
#length(coverColNams)
# B. Assign row ids
spColNams<-c('spID','GenusSpecies','Genus','Species')
spCols<-species[,spColNams]
# C. Set up empty dataframe
tmp<-mat.or.vec(nr=dim(spCols[1]), nc=length(coverColNams))
tmp[tmp==0] <- NA
emptyDf<-data.frame(spCols, tmp)
colnames(emptyDf)<-c(spColNams,coverColNams)
# D. Get rid of rows with spID or Genus identifer == NA
emptyDf[is.na(emptyDf$spID),] #none
emptyDf[is.na(emptyDf$Genus),] #1
emptyDf[is.na(emptyDf$Species),] #same as above
emptyDf<-emptyDf[!is.na(emptyDf$Genus),] #fix this.
View(cover.sp)
library(ggplot2)
library(gridExtra)
library(reshape2)
source('CODE/mytheme.R')
figuresPath<-file.path(getwd()[1], "FIGURES_TABLES", "cwm") #where to put the saved plots
fig.height<-2.5 #inches
fig.width<- 2.5 #inches
fig.res<-300
synthdataPath<-file.path(getwd()[1], "DATA", "DATA_SYNTHESIZED", "cwm") #where to put the clean dataframes
#data synthesized by *MIIN_1_paperData.Rmd*
observations<-read.table("DATA/DATA_SYNTHESIZED/paperData/observations_procd.txt", header=TRUE, sep="\t")
cover<-read.table("DATA/DATA_SYNTHESIZED/paperData/cover_procd.txt", header=TRUE, sep="\t")
species<-read.table("DATA/DATA_SYNTHESIZED/paperData/species_procd.txt", header=TRUE, sep="\t")
traits<-read.table("DATA/DATA_SYNTHESIZED/paperData/traits_procd.txt", header=TRUE, sep="\t")
measures<-read.table("DATA/DATA_SYNTHESIZED/paperData/measures_procd.txt", header=TRUE, sep="\t")
#data synthesized by *MIIN_1_tryData.Rmd*
tryDataT<-read.table("DATA/DATA_SYNTHESIZED/tryData/tryDataT.txt", header=TRUE, sep="\t")
tryData_traitKey<-read.table("DATA/DATA_SYNTHESIZED/tryData/tryData_traitKey.txt", header=TRUE, sep="\t")
source('CODE/cwm/script_TRYstdUnits.R') # TASK= Convert TRY data to the common units used for paper traits; NEEDS= tryData_traitKey, tryDataT; MAKES= tryDataT.cu
source('CODE/cwm/script_traitBySpecies.R') # TASK= Pulls relavant TRY data and creates a species x trait table; NEEDS= tryData_traitKey, tryDataT, species; MAKES= tryGS.summ, tryGX.summ
source('CODE/cwm/script_t.R') # TASK= see above; NEEDS= species, traits, tryGS.summ, tryGX.summ; MAKES= spIDtraits
newfilename<-'spIDtraits.txt'
write.table(spIDtraits, file=paste(synthdataPath,newfilename, sep='/'), sep='\t') #will need to use this in 'summary.Rmd' to make a quality plot
source('CODE/cwm/script_spcover.R') # TASK= Calcuate species cover if possible; NEEDS= observations, cover, species; MAKES= cover.sp
source('CODE/cwm/script_spcover.R') # TASK= Calcuate species cover if possible; NEEDS= observations, cover, species; MAKES= cover.sp
tmp<-cover.sp[cover.sp$covNumSpp == '>1 species' ,c('obsID','covInvasive','covSpEntryID','covNumSpp','covUnit','covInvMean','covNatMean','stdmeanInv','stdmeanNat','numsp', 'GenusSpecies')]
head(tmp)
library(plyr)
source('CODE/cwm/fxn_FillTable_cover.R')
# A. Assign column names
coverOfInterest<-c('Inv', 'Nat')
coverColNams<-c(paste("mean_",coverOfInterest, sep=''),
paste("var_",coverOfInterest, sep=''),
paste("n_",coverOfInterest, sep=''),
"unit",
"qualityMeas",
"qualityNumSp")
#length(coverColNams)
# B. Assign row ids
spColNams<-c('spID','GenusSpecies','Genus','Species')
spCols<-species[,spColNams]
# C. Set up empty dataframe
tmp<-mat.or.vec(nr=dim(spCols[1]), nc=length(coverColNams))
tmp[tmp==0] <- NA
emptyDf<-data.frame(spCols, tmp)
colnames(emptyDf)<-c(spColNams,coverColNams)
# D. Get rid of rows with spID or Genus identifer == NA
emptyDf[is.na(emptyDf$spID),] #none
emptyDf[is.na(emptyDf$Genus),] #1
emptyDf[is.na(emptyDf$Species),] #same as above
emptyDf<-emptyDf[!is.na(emptyDf$Genus),] #fix this.
#View(emptyDf)
unique(cover.sp$covCat) #good. only 1 covCat
unique(cover.sp$stdunit) #good. only 1 unit
cover.sp.summ<-ddply(cover.sp, ~spID, summarise,
meanInv= stdmeanInv,
varInv= stdvarInv,
nInv=covInvN,
meanNat= stdmeanNat,
varNat= stdvarNat,
nNat= covNatN,
unit= stdunit,
qualityMeas= covQuality,
qualityNumSp= covNumSpp)
View(cover.sp.summ)
sum(is.na(cover.sp.summ$spID)) # this should be 0.  If not, then there is an 'NA' under spID and need to get rid of that row
# B. For each spID, enter the data into the appropriate column of emptyDf
spIDcover<-FillTable.cover(toBeFilled=emptyDf,
fillWithThis=cover.sp.summ,
identifier='spID')
#View(spIDcover)
colsToAmmend<-colnames(spIDcover)[-(1:4)]
colnames(spIDcover)[-(1:4)]<-paste('cover',colsToAmmend,sep='_') #rename columns
#View(spIDcover)
# C. Summarize
sparse.fill_cover<-SparseSumm.cover(spIDcover)
sparse.fill_cover
source('CODE/cwm/script_c.R') # TASK= see above; NEEDS= species, cover.sp; MAKES= spIDcover
newfilename<-'spIDcover.txt'
write.table(spIDcover, file=paste(synthdataPath,newfilename, sep='/'), sep='\t') #will need to use this in 'summary.Rmd' to make a quality plot
traitsOfInterest<-c('cn', 'percN', 'littercn', 'litterpercN')
source('CODE/cwm/script_cwm_1.R') # TASK = Binds spIDtraits and spIDcover and determines spID that fit data requirements, preps trait*relabund dataframes; NEEDS= traitsOfInterest, spIDtraits and spID cover; MAKES= df.list
source('CODE/cwm/script_cwm_2.R') # TASK= Calculates the relative abundance for each spID and ammends to each trait dataframe; NEEDS= spIDsyn1, df.list; MAKES= df.list2
source('CODE/cwm/script_cwm_3.R') # TASK= Calculates the CWM in invaded and native areas for each obsID; NEEDS= df.list2; MAKES= cwm.list
warnings()
source('CODE/cwm/script_cwm_4.R') # TASK= Merges CWM reported within studies with those that were calculated; NEEDS= meas_stdunits, cwm.list; MAKES= cwm.r.list
cwm_calculated<-ldply(cwm.list, data.frame)
colnames(cwm_calculated)[1]<-'traitCat'
View(cwm_calculated)
cwm_withReported<-ldply(cwm.r.list, data.frame)
colnames(cwm_withReported)[1]<-'traitCat'
#View(cwm_withReported)
df<-cwm_withReported #use this one
View(df)
nSpCols<-paste(rep(c('invadedArea','nativeArea'),2),rep(c('invasiveSp','nativeSp'), each=2), sep="_")
idcols<-c('obsID','traitCat','var','nTr','unit','relabund_note',nSpCols,'cwmCalc')
#melt down the cwm values and the quality data
#colnames(df)[!colnames(df) %in% idcols] #melted columns
m.df<-melt(df, id.vars=idcols) #melt
#colnames(m.df) #new cols
#add column to differentiate between inv and nat in variable column
m.df$invType<-rep(NA,length(dim(m.df)[1]))
m.df[grepl('_InvArea',m.df$variable),'invType'] <- 'InvArea'
m.df[grepl('_NatArea',m.df$variable),'invType'] <- 'NatArea'
m.df[grepl('_InvSpInvArea',m.df$variable),'invType'] <- 'InvSpInvArea'
#add column to differentiate between mean, nSp, nMeasCov, nBOSDCov, n1spCov, nXspCov, nOrigTr, nTryGS, nTryGX
m.df$valueType<-rep(NA,length(dim(m.df)[1]))
m.df[grepl('mean_',m.df$variable),'valueType'] <- 'mean'
m.df[grepl('nSp_',m.df$variable),'valueType'] <- 'nSp'
m.df[grepl('nMeasCov_',m.df$variable),'valueType'] <- 'nMeasCov'
m.df[grepl('nBOSDCov_',m.df$variable),'valueType'] <- 'nBOSDCov'
m.df[grepl('n1spCov_',m.df$variable),'valueType'] <- 'n1spCov'
m.df[grepl('nXspCov_',m.df$variable),'valueType'] <- 'nXspCov'
m.df[grepl('nOrigTr_',m.df$variable),'valueType'] <- 'nOrigTr'
m.df[grepl('nTryGS_',m.df$variable),'valueType'] <- 'nTryGS'
m.df[grepl('nTryGX_',m.df$variable),'valueType'] <- 'nTryGX'
#cast so that each row is an obsID
c.df<-dcast(m.df, obsID + traitCat + invType +
invadedArea_invasiveSp + nativeArea_invasiveSp + invadedArea_nativeSp + nativeArea_nativeSp +
cwmCalc ~
valueType)
#View(c.df)
#calculate % coverage
c.df$percMeasCov<-c.df$nMeasCov / c.df$nSp * 100 #calc perc cover measured
c.df$perc1spCov<-c.df$n1spCov / c.df$nSp * 100 #calc perc 1 sp measured
c.df$percOrigTr<-c.df$nOrigTr / c.df$nSp * 100 #calc perc orig trait data
c.df$percTryGS<-c.df$nTryGS / c.df$nSp * 100 #calc perc species trait data
#check out the distribution of data quality values
p1<-ggplot(c.df, aes(x=percMeasCov)) +
geom_histogram() + mytheme + scale_y_continuous(expand = c(0,0)) + scale_x_continuous(expand = c(0,0))  #0, >0 and <100, 100
p2<-ggplot(c.df, aes(x=perc1spCov)) +
geom_histogram() + mytheme + scale_y_continuous(expand = c(0,0)) + scale_x_continuous(expand = c(0,0)) #0, >0 and <100, 100
p3<-ggplot(c.df, aes(x=percOrigTr)) +
geom_histogram() + mytheme + scale_y_continuous(expand = c(0,0)) + scale_x_continuous(expand = c(0,0)) #0, >0 and <100, 100
p4<-ggplot(c.df, aes(x=percTryGS)) +
geom_histogram() + mytheme + scale_y_continuous(expand = c(0,0)) + scale_x_continuous(expand = c(0,0)) #0, >0 and <100, 100
p1 #percent of sp. with cover data that is measured
p2 #percent of sp. with cover data that is species-specific
p3 #percent of sp. with trait data from the original paper
p4 #percent of sp. with trait data from TRY t is sp-specific
#bin data quality values using a function that splits into None (0), Mid (1-99), All (100)
BinIt<-function(data, newCol, origCol){
data[,newCol]<-rep(NA, dim(data)[1])
data[data[,origCol] == 0 & !is.na(data[,origCol]), newCol] <- 'None'
data[data[,origCol] >0 & data[,origCol] <100 & !is.na(data[,origCol]), newCol] <- 'Mid'
data[data[,origCol] == 100 & !is.na(data[,origCol]), newCol] <- 'All'
return(data)
}
datafr<-c.df
cats<-c('MeasCov','1spCov','OrigTr','TryGS')
newCol.vec<-paste('bin',cats, sep='')
origCol.vec<-paste('perc',cats, sep='')
datafr.list<-list()
for(i in 1:length(cats)){
datafr<-BinIt(data=datafr, newCol=newCol.vec[i], origCol=origCol.vec[i])
}
#all bins
datafr$qualityBins<-apply(datafr[,colnames(datafr) %in% newCol.vec], 1, function(x) paste(x, collapse="_"))
#cover bins
vec1<-paste('Measured=',datafr$binMeasCov, sep="")
vec2<-paste('1sp=',datafr$bin1spCov, sep="")
datafr$coverBins<-paste(vec1, vec2, sep=", ")
#trait bins
vec1<-paste('Original=',datafr$binOrigTr, sep="")
vec2<-paste('SpeciesLevel=',datafr$binTryGS, sep="")
datafr$traitBins<-paste(vec1, vec2, sep=", ")
c.df2<-datafr
#assign each cwm value a quality rank based on... (max quality = 4pts)
#(4pt) if cwm was reported in the original paper rather than calculated
crit1<-c.df2$cwmCalc == 'reported'
crit1[crit1==TRUE]<-4
#(1pt) if more than 25% of sp. is measured
crit2<-c.df2$percMeasCov > 25 & !is.na(c.df2$percMeasCov)
crit2[crit2==TRUE]<-1
#(1pt) if more than 25% of sp. with cover data is species-specific
crit3<-c.df2$perc1spCov > 25 & !is.na(c.df2$perc1spCov)
crit3[crit3==TRUE]<-1
#(1pt) if more than 25% of sp. with trait data is from the original paper OR is species-specific rather than Genus-specific
vec1<-c.df2$percOrigTr
vec2<-c.df2$percTryGS
vec1[is.na(vec1)]<-0
vec2[is.na(vec2)]<-0
df.vec<-data.frame(vec1,vec2)
df.vec$vec3<-df.vec$vec1 + df.vec$vec2
crit4<-df.vec$vec3 > 25
crit4[crit4==TRUE]<-1
#combine criteria in a dataframe
crit<-data.frame(crit1,crit2,crit3,crit4)
crit$sum<-crit1+crit2+crit3+crit4
crit[crit$crit1==4,'sum']<-4
#set up a new column to hold quality rank values
c.df2$qualRank<-crit$sum
#View(c.df2)
#remove unnecessary columns
df1<-c.df2[,c('obsID','traitCat','invType','cwmCalc',
'invadedArea_invasiveSp','nativeArea_invasiveSp','invadedArea_nativeSp','nativeArea_nativeSp',
'qualityBins','coverBins','traitBins','qualRank',
'mean')]
#View(c.df2)
#make sure factors are coded as factors
df1$qualityBins<- as.factor(df1$qualityBins)
df1$coverBins<- as.factor(df1$coverBins)
df1$traitBins<- as.factor(df1$traitBins)
#rename columns
colnames(df1)[which(colnames(df1) == 'coverBins')]<-'qualityCover'
colnames(df1)[which(colnames(df1) == 'traitBins')]<-'qualityTrait'
colnames(df1)[which(colnames(df1) == 'cwmCalc')]<-'qualityCWMcalc'
colnames(df1)[which(colnames(df1) == 'InvArea')]<-'inv_trMean'
colnames(df1)[which(colnames(df1) == 'InvSpInvArea')]<-'invINinv_trMean'
colnames(df1)[which(colnames(df1) == 'NatArea')]<-'nat_trMean'
colnames(df1)[which(colnames(df1) == 'invadedArea_invasiveSp')]<-'n_invSp_invArea'
colnames(df1)[which(colnames(df1) == 'nativeArea_invasiveSp')]<-'n_invSp_natArea'
colnames(df1)[which(colnames(df1) == 'invadedArea_nativeSp')]<-'n_natSp_invArea'
colnames(df1)[which(colnames(df1) == 'nativeArea_nativeSp')]<-'n_natSp_natArea'
colnames(df1)[which(colnames(df1) == 'mean')] <- 'cwm'
# look for outliers
#cn
#litterpercN
#litterpercN
#percN
sub<-subset(df1, traitCat == 'percN' & cwm >5)
#sub
newfilename<-'cwm.txt'
write.table(df1, file=paste(synthdataPath,newfilename, sep='/'), sep='\t')
